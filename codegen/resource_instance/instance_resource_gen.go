// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_instance

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func InstanceResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"data": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"instance_ids": schema.ListAttribute{
						ElementType:         types.StringType,
						Computed:            true,
						Description:         "The unique identifiers (IDs) of the launched instances.",
						MarkdownDescription: "The unique identifiers (IDs) of the launched instances.",
					},
				},
				CustomType: DataType{
					ObjectType: types.ObjectType{
						AttrTypes: DataValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"file_system_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "List of filesystem names to mount to the instance",
				MarkdownDescription: "List of filesystem names to mount to the instance",
			},
			"instance_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The unique identifier (ID) of the instance",
				MarkdownDescription: "The unique identifier (ID) of the instance",
			},
			"instance_type_name": schema.StringAttribute{
				Required:            true,
				Description:         "Name of the instance type to launch",
				MarkdownDescription: "Name of the instance type to launch",
			},
			"name": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "User-provided name for the instance (max 64 chars)",
				MarkdownDescription: "User-provided name for the instance (max 64 chars)",
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 64),
				},
			},
			"region_name": schema.StringAttribute{
				Required:            true,
				Description:         "Lambda Cloud region code where instance will be launched",
				MarkdownDescription: "Lambda Cloud region code where instance will be launched",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"europe-central-1",
						"asia-south-1",
						"australia-east-1",
						"me-west-1",
						"asia-northeast-1",
						"asia-northeast-2",
						"us-east-1",
						"us-west-2",
						"us-west-1",
						"us-south-1",
						"us-west-3",
						"us-midwest-1",
						"us-east-2",
						"us-south-2",
						"us-south-3",
						"us-east-3",
						"us-midwest-2",
						"test-east-1",
						"test-west-1",
					),
				},
			},
			"ssh_key_names": schema.ListAttribute{
				ElementType:         types.StringType,
				Required:            true,
				Description:         "List of SSH key names to add to the instance",
				MarkdownDescription: "List of SSH key names to add to the instance",
			},
		},
	}
}

type InstanceModel struct {
	Data             DataValue    `tfsdk:"data"`
	FileSystemNames  types.List   `tfsdk:"file_system_names"`
	InstanceId       types.String `tfsdk:"instance_id"`
	InstanceTypeName types.String `tfsdk:"instance_type_name"`
	Name             types.String `tfsdk:"name"`
	RegionName       types.String `tfsdk:"region_name"`
	SshKeyNames      types.List   `tfsdk:"ssh_key_names"`
}

var _ basetypes.ObjectTypable = DataType{}

type DataType struct {
	basetypes.ObjectType
}

func (t DataType) Equal(o attr.Type) bool {
	other, ok := o.(DataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t DataType) String() string {
	return "DataType"
}

func (t DataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	instanceIdsAttribute, ok := attributes["instance_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`instance_ids is missing from object`)

		return nil, diags
	}

	instanceIdsVal, ok := instanceIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`instance_ids expected to be basetypes.ListValue, was: %T`, instanceIdsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return DataValue{
		InstanceIds: instanceIdsVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewDataValueNull() DataValue {
	return DataValue{
		state: attr.ValueStateNull,
	}
}

func NewDataValueUnknown() DataValue {
	return DataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewDataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (DataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing DataValue Attribute Value",
				"While creating a DataValue value, a missing attribute value was detected. "+
					"A DataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid DataValue Attribute Type",
				"While creating a DataValue value, an invalid attribute value was detected. "+
					"A DataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("DataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra DataValue Attribute Value",
				"While creating a DataValue value, an extra attribute value was detected. "+
					"A DataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra DataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewDataValueUnknown(), diags
	}

	instanceIdsAttribute, ok := attributes["instance_ids"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`instance_ids is missing from object`)

		return NewDataValueUnknown(), diags
	}

	instanceIdsVal, ok := instanceIdsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`instance_ids expected to be basetypes.ListValue, was: %T`, instanceIdsAttribute))
	}

	if diags.HasError() {
		return NewDataValueUnknown(), diags
	}

	return DataValue{
		InstanceIds: instanceIdsVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewDataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) DataValue {
	object, diags := NewDataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewDataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t DataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewDataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewDataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewDataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewDataValueMust(DataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t DataType) ValueType(ctx context.Context) attr.Value {
	return DataValue{}
}

var _ basetypes.ObjectValuable = DataValue{}

type DataValue struct {
	InstanceIds basetypes.ListValue `tfsdk:"instance_ids"`
	state       attr.ValueState
}

func (v DataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["instance_ids"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.InstanceIds.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["instance_ids"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v DataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v DataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v DataValue) String() string {
	return "DataValue"
}

func (v DataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var instanceIdsVal basetypes.ListValue
	switch {
	case v.InstanceIds.IsUnknown():
		instanceIdsVal = types.ListUnknown(types.StringType)
	case v.InstanceIds.IsNull():
		instanceIdsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		instanceIdsVal, d = types.ListValue(types.StringType, v.InstanceIds.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"instance_ids": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"instance_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"instance_ids": instanceIdsVal,
		})

	return objVal, diags
}

func (v DataValue) Equal(o attr.Value) bool {
	other, ok := o.(DataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.InstanceIds.Equal(other.InstanceIds) {
		return false
	}

	return true
}

func (v DataValue) Type(ctx context.Context) attr.Type {
	return DataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v DataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"instance_ids": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}
