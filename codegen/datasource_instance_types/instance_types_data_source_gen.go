// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_instance_types

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func InstanceTypesDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"data": schema.MapNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"instance_type": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"description": schema.StringAttribute{
									Computed:            true,
									Description:         "A description of the instance type.",
									MarkdownDescription: "A description of the instance type.",
								},
								"gpu_description": schema.StringAttribute{
									Computed:            true,
									Description:         "The type of GPU used by this instance type.",
									MarkdownDescription: "The type of GPU used by this instance type.",
								},
								"name": schema.StringAttribute{
									Computed:            true,
									Description:         "The name of the instance type.",
									MarkdownDescription: "The name of the instance type.",
								},
								"price_cents_per_hour": schema.Int64Attribute{
									Computed:            true,
									Description:         "The price of the instance type in US cents per hour.",
									MarkdownDescription: "The price of the instance type in US cents per hour.",
								},
								"specs": schema.SingleNestedAttribute{
									Attributes: map[string]schema.Attribute{
										"gpus": schema.Int64Attribute{
											Computed:            true,
											Description:         "The number of GPUs.",
											MarkdownDescription: "The number of GPUs.",
										},
										"memory_gib": schema.Int64Attribute{
											Computed:            true,
											Description:         "The amount of RAM in gibibytes (GiB).",
											MarkdownDescription: "The amount of RAM in gibibytes (GiB).",
										},
										"storage_gib": schema.Int64Attribute{
											Computed:            true,
											Description:         "The amount of storage in gibibytes (GiB).",
											MarkdownDescription: "The amount of storage in gibibytes (GiB).",
										},
										"vcpus": schema.Int64Attribute{
											Computed:            true,
											Description:         "The number of virtual CPUs.",
											MarkdownDescription: "The number of virtual CPUs.",
										},
									},
									CustomType: SpecsType{
										ObjectType: types.ObjectType{
											AttrTypes: SpecsValue{}.AttributeTypes(ctx),
										},
									},
									Computed: true,
								},
							},
							CustomType: InstanceTypeType{
								ObjectType: types.ObjectType{
									AttrTypes: InstanceTypeValue{}.AttributeTypes(ctx),
								},
							},
							Computed: true,
						},
						"regions_with_capacity_available": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"description": schema.StringAttribute{
										Computed:            true,
										Description:         "The location represented by the region code.",
										MarkdownDescription: "The location represented by the region code.",
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
								},
								CustomType: RegionsWithCapacityAvailableType{
									ObjectType: types.ObjectType{
										AttrTypes: RegionsWithCapacityAvailableValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "A list of the regions in which this instance type is available.",
							MarkdownDescription: "A list of the regions in which this instance type is available.",
						},
					},
					CustomType: DataType{
						ObjectType: types.ObjectType{
							AttrTypes: DataValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type InstanceTypesModel struct {
	Data types.Map `tfsdk:"data"`
}

var _ basetypes.ObjectTypable = DataType{}

type DataType struct {
	basetypes.ObjectType
}

func (t DataType) Equal(o attr.Type) bool {
	other, ok := o.(DataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t DataType) String() string {
	return "DataType"
}

func (t DataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	instanceTypeAttribute, ok := attributes["instance_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`instance_type is missing from object`)

		return nil, diags
	}

	instanceTypeVal, ok := instanceTypeAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`instance_type expected to be basetypes.ObjectValue, was: %T`, instanceTypeAttribute))
	}

	regionsWithCapacityAvailableAttribute, ok := attributes["regions_with_capacity_available"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`regions_with_capacity_available is missing from object`)

		return nil, diags
	}

	regionsWithCapacityAvailableVal, ok := regionsWithCapacityAvailableAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`regions_with_capacity_available expected to be basetypes.ListValue, was: %T`, regionsWithCapacityAvailableAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return DataValue{
		InstanceType:                 instanceTypeVal,
		RegionsWithCapacityAvailable: regionsWithCapacityAvailableVal,
		state:                        attr.ValueStateKnown,
	}, diags
}

func NewDataValueNull() DataValue {
	return DataValue{
		state: attr.ValueStateNull,
	}
}

func NewDataValueUnknown() DataValue {
	return DataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewDataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (DataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing DataValue Attribute Value",
				"While creating a DataValue value, a missing attribute value was detected. "+
					"A DataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid DataValue Attribute Type",
				"While creating a DataValue value, an invalid attribute value was detected. "+
					"A DataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("DataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra DataValue Attribute Value",
				"While creating a DataValue value, an extra attribute value was detected. "+
					"A DataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra DataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewDataValueUnknown(), diags
	}

	instanceTypeAttribute, ok := attributes["instance_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`instance_type is missing from object`)

		return NewDataValueUnknown(), diags
	}

	instanceTypeVal, ok := instanceTypeAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`instance_type expected to be basetypes.ObjectValue, was: %T`, instanceTypeAttribute))
	}

	regionsWithCapacityAvailableAttribute, ok := attributes["regions_with_capacity_available"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`regions_with_capacity_available is missing from object`)

		return NewDataValueUnknown(), diags
	}

	regionsWithCapacityAvailableVal, ok := regionsWithCapacityAvailableAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`regions_with_capacity_available expected to be basetypes.ListValue, was: %T`, regionsWithCapacityAvailableAttribute))
	}

	if diags.HasError() {
		return NewDataValueUnknown(), diags
	}

	return DataValue{
		InstanceType:                 instanceTypeVal,
		RegionsWithCapacityAvailable: regionsWithCapacityAvailableVal,
		state:                        attr.ValueStateKnown,
	}, diags
}

func NewDataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) DataValue {
	object, diags := NewDataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewDataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t DataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewDataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewDataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewDataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewDataValueMust(DataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t DataType) ValueType(ctx context.Context) attr.Value {
	return DataValue{}
}

var _ basetypes.ObjectValuable = DataValue{}

type DataValue struct {
	InstanceType                 basetypes.ObjectValue `tfsdk:"instance_type"`
	RegionsWithCapacityAvailable basetypes.ListValue   `tfsdk:"regions_with_capacity_available"`
	state                        attr.ValueState
}

func (v DataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["instance_type"] = basetypes.ObjectType{
		AttrTypes: InstanceTypeValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["regions_with_capacity_available"] = basetypes.ListType{
		ElemType: RegionsWithCapacityAvailableValue{}.Type(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.InstanceType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["instance_type"] = val

		val, err = v.RegionsWithCapacityAvailable.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["regions_with_capacity_available"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v DataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v DataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v DataValue) String() string {
	return "DataValue"
}

func (v DataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var instanceType basetypes.ObjectValue

	if v.InstanceType.IsNull() {
		instanceType = types.ObjectNull(
			InstanceTypeValue{}.AttributeTypes(ctx),
		)
	}

	if v.InstanceType.IsUnknown() {
		instanceType = types.ObjectUnknown(
			InstanceTypeValue{}.AttributeTypes(ctx),
		)
	}

	if !v.InstanceType.IsNull() && !v.InstanceType.IsUnknown() {
		instanceType = types.ObjectValueMust(
			InstanceTypeValue{}.AttributeTypes(ctx),
			v.InstanceType.Attributes(),
		)
	}

	regionsWithCapacityAvailable := types.ListValueMust(
		RegionsWithCapacityAvailableType{
			basetypes.ObjectType{
				AttrTypes: RegionsWithCapacityAvailableValue{}.AttributeTypes(ctx),
			},
		},
		v.RegionsWithCapacityAvailable.Elements(),
	)

	if v.RegionsWithCapacityAvailable.IsNull() {
		regionsWithCapacityAvailable = types.ListNull(
			RegionsWithCapacityAvailableType{
				basetypes.ObjectType{
					AttrTypes: RegionsWithCapacityAvailableValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.RegionsWithCapacityAvailable.IsUnknown() {
		regionsWithCapacityAvailable = types.ListUnknown(
			RegionsWithCapacityAvailableType{
				basetypes.ObjectType{
					AttrTypes: RegionsWithCapacityAvailableValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"instance_type": basetypes.ObjectType{
			AttrTypes: InstanceTypeValue{}.AttributeTypes(ctx),
		},
		"regions_with_capacity_available": basetypes.ListType{
			ElemType: RegionsWithCapacityAvailableValue{}.Type(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"instance_type":                   instanceType,
			"regions_with_capacity_available": regionsWithCapacityAvailable,
		})

	return objVal, diags
}

func (v DataValue) Equal(o attr.Value) bool {
	other, ok := o.(DataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.InstanceType.Equal(other.InstanceType) {
		return false
	}

	if !v.RegionsWithCapacityAvailable.Equal(other.RegionsWithCapacityAvailable) {
		return false
	}

	return true
}

func (v DataValue) Type(ctx context.Context) attr.Type {
	return DataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v DataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"instance_type": basetypes.ObjectType{
			AttrTypes: InstanceTypeValue{}.AttributeTypes(ctx),
		},
		"regions_with_capacity_available": basetypes.ListType{
			ElemType: RegionsWithCapacityAvailableValue{}.Type(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = InstanceTypeType{}

type InstanceTypeType struct {
	basetypes.ObjectType
}

func (t InstanceTypeType) Equal(o attr.Type) bool {
	other, ok := o.(InstanceTypeType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t InstanceTypeType) String() string {
	return "InstanceTypeType"
}

func (t InstanceTypeType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	gpuDescriptionAttribute, ok := attributes["gpu_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gpu_description is missing from object`)

		return nil, diags
	}

	gpuDescriptionVal, ok := gpuDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gpu_description expected to be basetypes.StringValue, was: %T`, gpuDescriptionAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	priceCentsPerHourAttribute, ok := attributes["price_cents_per_hour"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`price_cents_per_hour is missing from object`)

		return nil, diags
	}

	priceCentsPerHourVal, ok := priceCentsPerHourAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`price_cents_per_hour expected to be basetypes.Int64Value, was: %T`, priceCentsPerHourAttribute))
	}

	specsAttribute, ok := attributes["specs"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`specs is missing from object`)

		return nil, diags
	}

	specsVal, ok := specsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`specs expected to be basetypes.ObjectValue, was: %T`, specsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return InstanceTypeValue{
		Description:       descriptionVal,
		GpuDescription:    gpuDescriptionVal,
		Name:              nameVal,
		PriceCentsPerHour: priceCentsPerHourVal,
		Specs:             specsVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewInstanceTypeValueNull() InstanceTypeValue {
	return InstanceTypeValue{
		state: attr.ValueStateNull,
	}
}

func NewInstanceTypeValueUnknown() InstanceTypeValue {
	return InstanceTypeValue{
		state: attr.ValueStateUnknown,
	}
}

func NewInstanceTypeValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (InstanceTypeValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing InstanceTypeValue Attribute Value",
				"While creating a InstanceTypeValue value, a missing attribute value was detected. "+
					"A InstanceTypeValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InstanceTypeValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid InstanceTypeValue Attribute Type",
				"While creating a InstanceTypeValue value, an invalid attribute value was detected. "+
					"A InstanceTypeValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InstanceTypeValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("InstanceTypeValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra InstanceTypeValue Attribute Value",
				"While creating a InstanceTypeValue value, an extra attribute value was detected. "+
					"A InstanceTypeValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra InstanceTypeValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewInstanceTypeValueUnknown(), diags
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewInstanceTypeValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	gpuDescriptionAttribute, ok := attributes["gpu_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gpu_description is missing from object`)

		return NewInstanceTypeValueUnknown(), diags
	}

	gpuDescriptionVal, ok := gpuDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gpu_description expected to be basetypes.StringValue, was: %T`, gpuDescriptionAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewInstanceTypeValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	priceCentsPerHourAttribute, ok := attributes["price_cents_per_hour"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`price_cents_per_hour is missing from object`)

		return NewInstanceTypeValueUnknown(), diags
	}

	priceCentsPerHourVal, ok := priceCentsPerHourAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`price_cents_per_hour expected to be basetypes.Int64Value, was: %T`, priceCentsPerHourAttribute))
	}

	specsAttribute, ok := attributes["specs"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`specs is missing from object`)

		return NewInstanceTypeValueUnknown(), diags
	}

	specsVal, ok := specsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`specs expected to be basetypes.ObjectValue, was: %T`, specsAttribute))
	}

	if diags.HasError() {
		return NewInstanceTypeValueUnknown(), diags
	}

	return InstanceTypeValue{
		Description:       descriptionVal,
		GpuDescription:    gpuDescriptionVal,
		Name:              nameVal,
		PriceCentsPerHour: priceCentsPerHourVal,
		Specs:             specsVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewInstanceTypeValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) InstanceTypeValue {
	object, diags := NewInstanceTypeValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewInstanceTypeValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t InstanceTypeType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewInstanceTypeValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewInstanceTypeValueUnknown(), nil
	}

	if in.IsNull() {
		return NewInstanceTypeValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewInstanceTypeValueMust(InstanceTypeValue{}.AttributeTypes(ctx), attributes), nil
}

func (t InstanceTypeType) ValueType(ctx context.Context) attr.Value {
	return InstanceTypeValue{}
}

var _ basetypes.ObjectValuable = InstanceTypeValue{}

type InstanceTypeValue struct {
	Description       basetypes.StringValue `tfsdk:"description"`
	GpuDescription    basetypes.StringValue `tfsdk:"gpu_description"`
	Name              basetypes.StringValue `tfsdk:"name"`
	PriceCentsPerHour basetypes.Int64Value  `tfsdk:"price_cents_per_hour"`
	Specs             basetypes.ObjectValue `tfsdk:"specs"`
	state             attr.ValueState
}

func (v InstanceTypeValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["gpu_description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["price_cents_per_hour"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["specs"] = basetypes.ObjectType{
		AttrTypes: SpecsValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.GpuDescription.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["gpu_description"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.PriceCentsPerHour.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["price_cents_per_hour"] = val

		val, err = v.Specs.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["specs"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v InstanceTypeValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v InstanceTypeValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v InstanceTypeValue) String() string {
	return "InstanceTypeValue"
}

func (v InstanceTypeValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var specs basetypes.ObjectValue

	if v.Specs.IsNull() {
		specs = types.ObjectNull(
			SpecsValue{}.AttributeTypes(ctx),
		)
	}

	if v.Specs.IsUnknown() {
		specs = types.ObjectUnknown(
			SpecsValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Specs.IsNull() && !v.Specs.IsUnknown() {
		specs = types.ObjectValueMust(
			SpecsValue{}.AttributeTypes(ctx),
			v.Specs.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"description":          basetypes.StringType{},
		"gpu_description":      basetypes.StringType{},
		"name":                 basetypes.StringType{},
		"price_cents_per_hour": basetypes.Int64Type{},
		"specs": basetypes.ObjectType{
			AttrTypes: SpecsValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"description":          v.Description,
			"gpu_description":      v.GpuDescription,
			"name":                 v.Name,
			"price_cents_per_hour": v.PriceCentsPerHour,
			"specs":                specs,
		})

	return objVal, diags
}

func (v InstanceTypeValue) Equal(o attr.Value) bool {
	other, ok := o.(InstanceTypeValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.GpuDescription.Equal(other.GpuDescription) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.PriceCentsPerHour.Equal(other.PriceCentsPerHour) {
		return false
	}

	if !v.Specs.Equal(other.Specs) {
		return false
	}

	return true
}

func (v InstanceTypeValue) Type(ctx context.Context) attr.Type {
	return InstanceTypeType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v InstanceTypeValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"description":          basetypes.StringType{},
		"gpu_description":      basetypes.StringType{},
		"name":                 basetypes.StringType{},
		"price_cents_per_hour": basetypes.Int64Type{},
		"specs": basetypes.ObjectType{
			AttrTypes: SpecsValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = SpecsType{}

type SpecsType struct {
	basetypes.ObjectType
}

func (t SpecsType) Equal(o attr.Type) bool {
	other, ok := o.(SpecsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SpecsType) String() string {
	return "SpecsType"
}

func (t SpecsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	gpusAttribute, ok := attributes["gpus"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gpus is missing from object`)

		return nil, diags
	}

	gpusVal, ok := gpusAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gpus expected to be basetypes.Int64Value, was: %T`, gpusAttribute))
	}

	memoryGibAttribute, ok := attributes["memory_gib"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`memory_gib is missing from object`)

		return nil, diags
	}

	memoryGibVal, ok := memoryGibAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`memory_gib expected to be basetypes.Int64Value, was: %T`, memoryGibAttribute))
	}

	storageGibAttribute, ok := attributes["storage_gib"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`storage_gib is missing from object`)

		return nil, diags
	}

	storageGibVal, ok := storageGibAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`storage_gib expected to be basetypes.Int64Value, was: %T`, storageGibAttribute))
	}

	vcpusAttribute, ok := attributes["vcpus"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vcpus is missing from object`)

		return nil, diags
	}

	vcpusVal, ok := vcpusAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vcpus expected to be basetypes.Int64Value, was: %T`, vcpusAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SpecsValue{
		Gpus:       gpusVal,
		MemoryGib:  memoryGibVal,
		StorageGib: storageGibVal,
		Vcpus:      vcpusVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewSpecsValueNull() SpecsValue {
	return SpecsValue{
		state: attr.ValueStateNull,
	}
}

func NewSpecsValueUnknown() SpecsValue {
	return SpecsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSpecsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SpecsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SpecsValue Attribute Value",
				"While creating a SpecsValue value, a missing attribute value was detected. "+
					"A SpecsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SpecsValue Attribute Type",
				"While creating a SpecsValue value, an invalid attribute value was detected. "+
					"A SpecsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SpecsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SpecsValue Attribute Value",
				"While creating a SpecsValue value, an extra attribute value was detected. "+
					"A SpecsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SpecsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSpecsValueUnknown(), diags
	}

	gpusAttribute, ok := attributes["gpus"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`gpus is missing from object`)

		return NewSpecsValueUnknown(), diags
	}

	gpusVal, ok := gpusAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`gpus expected to be basetypes.Int64Value, was: %T`, gpusAttribute))
	}

	memoryGibAttribute, ok := attributes["memory_gib"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`memory_gib is missing from object`)

		return NewSpecsValueUnknown(), diags
	}

	memoryGibVal, ok := memoryGibAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`memory_gib expected to be basetypes.Int64Value, was: %T`, memoryGibAttribute))
	}

	storageGibAttribute, ok := attributes["storage_gib"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`storage_gib is missing from object`)

		return NewSpecsValueUnknown(), diags
	}

	storageGibVal, ok := storageGibAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`storage_gib expected to be basetypes.Int64Value, was: %T`, storageGibAttribute))
	}

	vcpusAttribute, ok := attributes["vcpus"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`vcpus is missing from object`)

		return NewSpecsValueUnknown(), diags
	}

	vcpusVal, ok := vcpusAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`vcpus expected to be basetypes.Int64Value, was: %T`, vcpusAttribute))
	}

	if diags.HasError() {
		return NewSpecsValueUnknown(), diags
	}

	return SpecsValue{
		Gpus:       gpusVal,
		MemoryGib:  memoryGibVal,
		StorageGib: storageGibVal,
		Vcpus:      vcpusVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewSpecsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SpecsValue {
	object, diags := NewSpecsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSpecsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SpecsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSpecsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSpecsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSpecsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSpecsValueMust(SpecsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SpecsType) ValueType(ctx context.Context) attr.Value {
	return SpecsValue{}
}

var _ basetypes.ObjectValuable = SpecsValue{}

type SpecsValue struct {
	Gpus       basetypes.Int64Value `tfsdk:"gpus"`
	MemoryGib  basetypes.Int64Value `tfsdk:"memory_gib"`
	StorageGib basetypes.Int64Value `tfsdk:"storage_gib"`
	Vcpus      basetypes.Int64Value `tfsdk:"vcpus"`
	state      attr.ValueState
}

func (v SpecsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["gpus"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["memory_gib"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["storage_gib"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["vcpus"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Gpus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["gpus"] = val

		val, err = v.MemoryGib.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["memory_gib"] = val

		val, err = v.StorageGib.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["storage_gib"] = val

		val, err = v.Vcpus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["vcpus"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SpecsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SpecsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SpecsValue) String() string {
	return "SpecsValue"
}

func (v SpecsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"gpus":        basetypes.Int64Type{},
		"memory_gib":  basetypes.Int64Type{},
		"storage_gib": basetypes.Int64Type{},
		"vcpus":       basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"gpus":        v.Gpus,
			"memory_gib":  v.MemoryGib,
			"storage_gib": v.StorageGib,
			"vcpus":       v.Vcpus,
		})

	return objVal, diags
}

func (v SpecsValue) Equal(o attr.Value) bool {
	other, ok := o.(SpecsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Gpus.Equal(other.Gpus) {
		return false
	}

	if !v.MemoryGib.Equal(other.MemoryGib) {
		return false
	}

	if !v.StorageGib.Equal(other.StorageGib) {
		return false
	}

	if !v.Vcpus.Equal(other.Vcpus) {
		return false
	}

	return true
}

func (v SpecsValue) Type(ctx context.Context) attr.Type {
	return SpecsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SpecsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"gpus":        basetypes.Int64Type{},
		"memory_gib":  basetypes.Int64Type{},
		"storage_gib": basetypes.Int64Type{},
		"vcpus":       basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = RegionsWithCapacityAvailableType{}

type RegionsWithCapacityAvailableType struct {
	basetypes.ObjectType
}

func (t RegionsWithCapacityAvailableType) Equal(o attr.Type) bool {
	other, ok := o.(RegionsWithCapacityAvailableType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t RegionsWithCapacityAvailableType) String() string {
	return "RegionsWithCapacityAvailableType"
}

func (t RegionsWithCapacityAvailableType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return RegionsWithCapacityAvailableValue{
		Description: descriptionVal,
		Name:        nameVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewRegionsWithCapacityAvailableValueNull() RegionsWithCapacityAvailableValue {
	return RegionsWithCapacityAvailableValue{
		state: attr.ValueStateNull,
	}
}

func NewRegionsWithCapacityAvailableValueUnknown() RegionsWithCapacityAvailableValue {
	return RegionsWithCapacityAvailableValue{
		state: attr.ValueStateUnknown,
	}
}

func NewRegionsWithCapacityAvailableValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (RegionsWithCapacityAvailableValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing RegionsWithCapacityAvailableValue Attribute Value",
				"While creating a RegionsWithCapacityAvailableValue value, a missing attribute value was detected. "+
					"A RegionsWithCapacityAvailableValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RegionsWithCapacityAvailableValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid RegionsWithCapacityAvailableValue Attribute Type",
				"While creating a RegionsWithCapacityAvailableValue value, an invalid attribute value was detected. "+
					"A RegionsWithCapacityAvailableValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RegionsWithCapacityAvailableValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("RegionsWithCapacityAvailableValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra RegionsWithCapacityAvailableValue Attribute Value",
				"While creating a RegionsWithCapacityAvailableValue value, an extra attribute value was detected. "+
					"A RegionsWithCapacityAvailableValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra RegionsWithCapacityAvailableValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewRegionsWithCapacityAvailableValueUnknown(), diags
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewRegionsWithCapacityAvailableValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewRegionsWithCapacityAvailableValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return NewRegionsWithCapacityAvailableValueUnknown(), diags
	}

	return RegionsWithCapacityAvailableValue{
		Description: descriptionVal,
		Name:        nameVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewRegionsWithCapacityAvailableValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) RegionsWithCapacityAvailableValue {
	object, diags := NewRegionsWithCapacityAvailableValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewRegionsWithCapacityAvailableValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t RegionsWithCapacityAvailableType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewRegionsWithCapacityAvailableValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewRegionsWithCapacityAvailableValueUnknown(), nil
	}

	if in.IsNull() {
		return NewRegionsWithCapacityAvailableValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewRegionsWithCapacityAvailableValueMust(RegionsWithCapacityAvailableValue{}.AttributeTypes(ctx), attributes), nil
}

func (t RegionsWithCapacityAvailableType) ValueType(ctx context.Context) attr.Value {
	return RegionsWithCapacityAvailableValue{}
}

var _ basetypes.ObjectValuable = RegionsWithCapacityAvailableValue{}

type RegionsWithCapacityAvailableValue struct {
	Description basetypes.StringValue `tfsdk:"description"`
	Name        basetypes.StringValue `tfsdk:"name"`
	state       attr.ValueState
}

func (v RegionsWithCapacityAvailableValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v RegionsWithCapacityAvailableValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v RegionsWithCapacityAvailableValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v RegionsWithCapacityAvailableValue) String() string {
	return "RegionsWithCapacityAvailableValue"
}

func (v RegionsWithCapacityAvailableValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"description": basetypes.StringType{},
		"name":        basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"description": v.Description,
			"name":        v.Name,
		})

	return objVal, diags
}

func (v RegionsWithCapacityAvailableValue) Equal(o attr.Value) bool {
	other, ok := o.(RegionsWithCapacityAvailableValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	return true
}

func (v RegionsWithCapacityAvailableValue) Type(ctx context.Context) attr.Type {
	return RegionsWithCapacityAvailableType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v RegionsWithCapacityAvailableValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"description": basetypes.StringType{},
		"name":        basetypes.StringType{},
	}
}
